service: better-apis-demo

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'shared'}
  region: eu-north-1
  memorySize: 1024
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: true
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
            - codedeploy:*
          Resource:
            - "*"
  environment:
    TOGGLES_URL: "https://www.mockachino.com/650dde1b-d1b5-48/toggles" # TODO: EDIT THIS TO YOUR ENDPOINT
    #LIBHONEY_DATASET: better-apis-workshop
    #LIBHONEY_API_KEY: some-random-key-123

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts
  - serverless-plugin-canary-deployments

package:
  individually: true

custom:
  alerts:
    dashboards: true
  esbuild:
    bundle: true
    minify: true

functions:
  Authorizer:
    handler: src/FeatureToggles/controllers/AuthController.handler
    description: ${self:service} authorizer
  FakeUser:
    handler: src/FakeUser/controllers/FakeUserController.handler
    description: Fake user
    events:
      - http:
          method: GET
          path: /fakeUser
          authorizer:
            name: Authorizer
            resultTtlInSeconds: 30 # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
            identitySource: method.request.header.Authorization
            type: request
    alarms:
      - name: CanaryCheck
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 3
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    deploymentSettings:
      type: AllAtOnce #Canary10Percent5Minutes
      alias: Live
      alarms:
        - FakeUserCanaryCheckAlarm
  FeatureToggles:
    handler: src/FeatureToggles/controllers/FeatureTogglesController.handler
    description: Feature toggles
    events:
      - http:
          method: POST
          path: /featureToggles
          request:
            schemas:
              application/json: ${file(api/FeatureToggles.validator.json)}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthFailureExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureUnauthorizedGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'